@*Views/Dashboard/Index.cshtml *@
@using System.Text.Json
@using System.Globalization
@using home_budget_app.Models;



@{
    ViewData["Title"] = "Dashboard";

    var monthsForSelect = ViewBag.Months as IEnumerable<dynamic>;
    var selectedMonth = ViewBag.SelectedMonth ?? DateTime.Now.Month; // domyślna wartość
    var selectedYear = ViewBag.SelectedYear ?? DateTime.Now.Year; // domyślna wartość
    var monthName = monthsForSelect?.FirstOrDefault(m => (int)m.Number == (int)selectedMonth)?.Name ?? CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(selectedMonth);

    // currentSortOrder z viewbag ustawiony przez kontroler
    string currentSortOrder = ViewBag.SortOrder ?? "date_desc";
}
<h1 class="my-4">Dashboard</h1>
<!-- Formularz filtrów -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                Filtry
            </div>
            <div class="card-body">
                <form method="get" asp-action="Index" class="row g-3 align-items-end">
                    <input type="hidden" name="sortOrder" value="@currentSortOrder"/>
                    <div class="col-md-4">
                        <label for="select1" class="form-label">Rok</label>
                        <select id="select1" name="year" class="form-select">
                            @foreach (var y in ViewBag.Years) //
                            {
                                <option value="@y"
                                        selected="@(y == selectedYear)">@y</option> @* używamy selectedYear z góry *@
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="select2" class="form-label">Miesiąc</label>
                        <select id="select2" name="month" class="form-select">
                            @foreach (var m in monthsForSelect) // używamy monthsForSelect
                            {
                                <option value="@m.Number"
                                        selected="@(m.Number == selectedMonth)">@m.Name</option> @* używamy selectedMonth z góry *@
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary w-100">Zastosuj</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Sumy + wykres -->
<div class="row mb-4">
    <!-- Lewa kolumna: 3 karty -->
    <div class="col-md-4 d-flex flex-column h-100">
        <div class="card flex-fill mb-3">
            <div class="card-header">Suma wydatków</div>
            <div class="card-body">
                <h5 class="card-title">@ViewBag.ExpensesSum.ToString("C")</h5>
                <p class="card-text">Łączne wydatki w wybranym okresie</p>
            </div>
        </div>
        <div class="card flex-fill mb-3">
            <div class="card-header">Suma dochodów</div>
            <div class="card-body">
                <h5 class="card-title">3 400,00 zł</h5>
                <p class="card-text">@ViewBag.IncomesSum.ToString("C")</p>
            </div>
        </div>
        <div class="card flex-fill">
            <div class="card-header">Wydatki w roku @ViewBag.SelectedYear</div>
            <div class="card-body">
                <h5 class="card-title">@ViewBag.TotalExpensesYear.ToString("C")</h5>
                <p class="card-text">Tyle wydałeś w tym roku</p>
            </div>
        </div>
    </div>

    <!-- Prawa kolumna: Wykres -->
    <div class="col-md-8">
        <div class="card h-100">
            <div class="card-header">Wydatki wg kategorii</div>
            <div class="card-body d-flex align-items-center">
                <canvas id="expensesByCategoryChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Dochody i wydatki w układzie góra/dół -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">Dochody i wydatki w ujęciu miesięcznym w roku @ViewBag.SelectedYear</div>
            <div class="card-body">
                <canvas id="incomesVsExpensesChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Tabela wydatków i dochodów -->
<div class="row ">
    <div class="col-12">
        <div class="card">
            <div class="card-header">Historia operacji za @monthName (@selectedYear)</div>
            <div class="card-body table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                    <tr>
                        <th scope="col">
                            Typ
                            <a href="@Url.Action("Index", "Dashboard", new { year = selectedYear, month = selectedMonth, sortOrder = ViewBag.SortOrder == "type_asc" ? "type_desc" : "type_asc" })"
                               title="Sortuj po typie">
                                @if (ViewBag.SortOrder == "id_asc")
                                {
                                    <i class="bi bi-sort-up"></i>
                                }
                                else if (ViewBag.SortOrder == "id_desc")
                                {
                                    <i class="bi bi-sort-down"></i>
                                }
                                else
                                {
                                    <i class="bi bi-filter"></i>
                                }
                            </a>
                        </th>

                        <th scope="col">Typ
                            <a href="@Url.Action("Index", "Dashboard", new { year = selectedYear, month = selectedMonth, sortOrder = ViewBag.SortOrder == "type_asc" ? "type_desc" : "type_asc" })"
                               title="Sortuj po typie">
                                @if (ViewBag.SortOrder == "type_asc")
                                {
                                    <i class="bi bi-sort-up"></i>
                                }
                                else if (ViewBag.SortOrder == "type_desc")
                                {
                                    <i class="bi bi-sort-down"></i>
                                }
                                else
                                {
                                    <i class="bi bi-filter"></i>
                                }
                            </a>
                        </th>
                        <th scope="col">Kategoria <a href="@Url.Action("Index", "Dashboard", new
                                                           {
                                                               year = selectedYear,
                                                               month = selectedMonth,
                                                               sortOrder = ViewBag.SortOrder == "category_asc" ? "category_desc" : "category_asc"
                                                           })" title="Sortuj po kategorii">
                            @if (ViewBag.SortOrder == "category_asc")
                            {
                                <i class="bi bi-sort-up"></i>
                            }
                            else if (ViewBag.SortOrder == "category_desc")
                            {
                                <i class="bi bi-sort-down"></i>
                            }
                            else
                            {
                                <i class="bi bi-filter"></i>
                            }
                        </a></th>
                        <th scope="col">Data
                            <a href="@Url.Action("Index", "Dashboard", new { year = selectedYear, month = selectedMonth, sortOrder = ViewBag.SortOrder == "date_asc" ? "date_desc" : "date_asc" })"
                               title="Sortuj po dacie">
                                @if (ViewBag.SortOrder == "date_asc")
                                {
                                    <i class="bi bi-sort-up"></i>
                                }
                                else if (ViewBag.SortOrder == "date_desc")
                                {
                                    <i class="bi bi-sort-down"></i>
                                }
                                else
                                {
                                    <i class="bi bi-filter"></i>
                                }
                            </a>
                      
                        </th>
                        <th scope="col">Kwota <a href="@Url.Action("Index", "Dashboard", new { year = selectedYear, month = selectedMonth, sortOrder = ViewBag.SortOrder == "amount_asc" ? "amount_desc" : "amount_asc" })"
                                                 title="Sortuj po kwocie">  @if (ViewBag.SortOrder == "amount_asc")
                                                                            {
                                                                                <i class="bi bi-sort-up"></i>
                                                                            }
                                                                            else if (ViewBag.SortOrder == "amount_desc")
                                                                            {
                                                                                <i class="bi bi-sort-down"></i>
                                                                            }
                                                                            else
                                                                            {
                                                                                <i class="bi bi-filter"></i>
                                                                            }</a></th>
                        <th scope="col">Notatka</th>
                    </tr>
                    </thead>
                    <tbody>
                    @{
                        var recentEntries = ViewBag.RecentEntries as List<home_budget_app.Controllers.TransactionViewModel>;
                    }
                    @if (recentEntries != null && recentEntries.Any())
                    {
                        foreach (var entry in recentEntries)
                        {
                            <tr>
                                <td>
                                    <a asp-action="Details"
                                       asp-controller="@(entry.Type == "Wydatek" ? "Expenses" : "Incomes")"
                                       asp-route-id="@entry.Id">
                                        @entry.Id
                                    </a>
                                </td>

                                <td>@entry.Type</td>
                                <td>@entry.Category</td>
                                <td>@entry.Date.ToString("yyyy-MM-dd")</td>
                                <td>
                                    @entry.Amount.ToString("C")
                                </td>
                                <td>@entry.Notes</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">Brak danych do wyświetlenia.</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const ctx = document.getElementById('expensesByCategoryChart').getContext('2d');

            const labels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                               ((Dictionary<string, double>)ViewBag.ExpensesSumsByCategoryForMonth).Keys));
            const data = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                             ((Dictionary<string, double>)ViewBag.ExpensesSumsByCategoryForMonth).Values));

            const chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Kwota wydatków (zł)',
                        data: data,
                        backgroundColor: 'rgba(21, 101, 192, 0.7)',
                        borderColor: 'rgba(13, 71, 161, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return value.toLocaleString('pl-PL', {style: 'currency', currency: 'PLN'});
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const val = context.raw;
                                    return val.toLocaleString('pl-PL', {style: 'currency', currency: 'PLN'});
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const ctx2 = document.getElementById('incomesVsExpensesChart').getContext('2d');

            const labels2 = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                                Enumerable.Range(1, 12).Select(i => System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i))));

            const incomesData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                                    ((Dictionary<int, double>)ViewBag.MonthlyIncomesSums).OrderBy(kv => kv.Key).Select(kv => kv.Value)));

            const expensesData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                                     ((Dictionary<int, double>)ViewBag.MonthlyExpensesSumsChart).OrderBy(kv => kv.Key).Select(kv => -kv.Value)));

            new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: labels2,
                    datasets: [
                        {
                            label: 'Dochody',
                            data: incomesData,
                            backgroundColor: 'rgba(46, 125, 50, 0.6)',
                            borderColor: 'rgba(27, 94, 32, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Wydatki',
                            data: expensesData,
                            backgroundColor: 'rgba(211, 47, 47, 0.6)',
                            borderColor: 'rgba(183, 28, 28, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            stacked: true,
                        },
                        y: {
                            stacked: true,
                            beginAtZero: true,
                            ticks: {
                                callback: function (value) {
                                    return Math.abs(value).toLocaleString('pl-PL', {
                                        style: 'currency',
                                        currency: 'PLN'
                                    });
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return `${context.dataset.label}: ` +
                                        Math.abs(context.raw).toLocaleString('pl-PL', {
                                            style: 'currency',
                                            currency: 'PLN'
                                        });
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}




